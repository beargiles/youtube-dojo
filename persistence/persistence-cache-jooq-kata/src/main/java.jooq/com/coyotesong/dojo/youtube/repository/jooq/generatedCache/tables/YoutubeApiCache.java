/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.dojo.youtube.repository.jooq.generatedCache.tables;


import com.coyotesong.dojo.youtube.repository.jooq.bindings.LocalDateTimeToInstantBinding;
import com.coyotesong.dojo.youtube.repository.jooq.generatedCache.ApiCache;
import com.coyotesong.dojo.youtube.repository.jooq.generatedCache.Keys;
import com.coyotesong.dojo.youtube.repository.jooq.generatedCache.tables.records.YoutubeApiCacheRecord;

import java.time.Instant;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class YoutubeApiCache extends TableImpl<YoutubeApiCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_cache.youtube_api_cache</code>
     */
    public static final YoutubeApiCache YOUTUBE_API_CACHE = new YoutubeApiCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YoutubeApiCacheRecord> getRecordType() {
        return YoutubeApiCacheRecord.class;
    }

    /**
     * The column <code>api_cache.youtube_api_cache.key</code>.
     */
    public final TableField<YoutubeApiCacheRecord, Integer> KEY = createField(DSL.name("key"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.request_json</code>.
     */
    public final TableField<YoutubeApiCacheRecord, JSON> REQUEST_JSON = createField(DSL.name("request_json"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.kind</code>.
     */
    public final TableField<YoutubeApiCacheRecord, String> KIND = createField(DSL.name("kind"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.region_code</code>.
     */
    public final TableField<YoutubeApiCacheRecord, String> REGION_CODE = createField(DSL.name("region_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.event_id</code>.
     */
    public final TableField<YoutubeApiCacheRecord, String> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.visitor_id</code>.
     */
    public final TableField<YoutubeApiCacheRecord, String> VISITOR_ID = createField(DSL.name("visitor_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.results_per_page</code>.
     */
    public final TableField<YoutubeApiCacheRecord, Integer> RESULTS_PER_PAGE = createField(DSL.name("results_per_page"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.total_results</code>.
     */
    public final TableField<YoutubeApiCacheRecord, Integer> TOTAL_RESULTS = createField(DSL.name("total_results"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.page_token</code>.
     */
    public final TableField<YoutubeApiCacheRecord, String> PAGE_TOKEN = createField(DSL.name("page_token"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.next_page_token</code>.
     */
    public final TableField<YoutubeApiCacheRecord, String> NEXT_PAGE_TOKEN = createField(DSL.name("next_page_token"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.prev_page_token</code>.
     */
    public final TableField<YoutubeApiCacheRecord, String> PREV_PAGE_TOKEN = createField(DSL.name("prev_page_token"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.content</code>.
     */
    public final TableField<YoutubeApiCacheRecord, JSON> CONTENT = createField(DSL.name("content"), SQLDataType.JSON, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.etag</code>.
     */
    public final TableField<YoutubeApiCacheRecord, String> ETAG = createField(DSL.name("etag"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>api_cache.youtube_api_cache.last_updated</code>.
     */
    public final TableField<YoutubeApiCacheRecord, Instant> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(0), this, "", new LocalDateTimeToInstantBinding());

    private YoutubeApiCache(Name alias, Table<YoutubeApiCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private YoutubeApiCache(Name alias, Table<YoutubeApiCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_cache.youtube_api_cache</code> table
     * reference
     */
    public YoutubeApiCache(String alias) {
        this(DSL.name(alias), YOUTUBE_API_CACHE);
    }

    /**
     * Create an aliased <code>api_cache.youtube_api_cache</code> table
     * reference
     */
    public YoutubeApiCache(Name alias) {
        this(alias, YOUTUBE_API_CACHE);
    }

    /**
     * Create a <code>api_cache.youtube_api_cache</code> table reference
     */
    public YoutubeApiCache() {
        this(DSL.name("youtube_api_cache"), null);
    }

    public <O extends Record> YoutubeApiCache(Table<O> child, ForeignKey<O, YoutubeApiCacheRecord> key) {
        super(child, key, YOUTUBE_API_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ApiCache.API_CACHE;
    }

    @Override
    public Identity<YoutubeApiCacheRecord, Integer> getIdentity() {
        return (Identity<YoutubeApiCacheRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<YoutubeApiCacheRecord> getPrimaryKey() {
        return Keys.YOUTUBE_API_CACHE_PKEY;
    }

    @Override
    public YoutubeApiCache as(String alias) {
        return new YoutubeApiCache(DSL.name(alias), this);
    }

    @Override
    public YoutubeApiCache as(Name alias) {
        return new YoutubeApiCache(alias, this);
    }

    @Override
    public YoutubeApiCache as(Table<?> alias) {
        return new YoutubeApiCache(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public YoutubeApiCache rename(String name) {
        return new YoutubeApiCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public YoutubeApiCache rename(Name name) {
        return new YoutubeApiCache(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public YoutubeApiCache rename(Table<?> name) {
        return new YoutubeApiCache(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, JSON, String, String, String, String, Integer, Integer, String, String, String, JSON, String, Instant> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Integer, ? super JSON, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super JSON, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Integer, ? super JSON, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super JSON, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
